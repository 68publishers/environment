<?php

declare(strict_types=1);

namespace SixtyEightPublishers\Environment\Command;

use Composer\Config;
use RuntimeException;
use Composer\Command\BaseCommand;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use function assert;
use function putenv;
use function dirname;
use function implode;
use function is_string;
use function var_export;
use function file_exists;
use function file_get_contents;
use function file_put_contents;
use const LOCK_EX;

final class DumpEnvironmentCommand extends BaseCommand
{
	private Config $config;

	private ?string $rootDir;

	public function __construct(Config $config, ?string $rootDir = NULL)
	{
		$this->config = $config;
		$this->rootDir = $rootDir;

		parent::__construct();
	}

	protected function configure(): void
	{
		$this->setName('dotenv:dump')
			->setAliases(['dump-env'])
			->setDescription('Compiles .env files to .env.local.php.')
			->setDefinition([
				new InputArgument('env', InputArgument::OPTIONAL, 'The application environment to dump .env files for - e.g. "prod".'),
			])
			->addOption('empty', NULL, InputOption::VALUE_NONE, 'Ignore the content of .env files');
	}

	protected function execute(InputInterface $input, OutputInterface $output): int
	{
		$envKey = 'APP_ENV';
		$env = $input->getArgument('env');
		assert(is_string($env) || NULL === $env);

		if ($env) {
			$_SERVER[$envKey] = $env;
		}

		$rootDir = $this->rootDir;

		if (NULL === $rootDir) {
			$vendorDir = $this->config->get('vendor-dir');
			assert(is_string($vendorDir));

			$rootDir = dirname($vendorDir);
		}

		$path = $rootDir . '/.env';
		$vars = [];

		if (!$env || !$input->getOption('empty')) {
			$vars = $this->loadEnv($path, $env);
			$env = $vars[$envKey];
		}

		if ($input->getOption('empty')) {
			$vars = [$envKey => $env];
		}

		$vars = var_export($vars, TRUE);
		$vars = <<<EOF
<?php
// This file was generated by running "composer dump-env $env"
return $vars;
EOF;
		file_put_contents($path . '.local.php', $vars, LOCK_EX);

		$this->getIO()->writeError('Successfully dumped .env files in <info>.env.local.php</>');

		return 0;
	}

	/**
	 * @return array<string, string>
	 */
	private function loadEnv(string $path, ?string $env): array
	{
		if (!file_exists($autoloadFile = $this->config->get('vendor-dir') . '/autoload.php')) {
			throw new RuntimeException(sprintf('Please run "composer install" before running this command: "%s" not found.', $autoloadFile));
		}

		require $autoloadFile;

		$envKey = 'APP_ENV';
		$globalsBackup = [$_SERVER, $_ENV];
		unset($_SERVER[$envKey]);
		$_ENV = [$envKey => $env];
		$_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER));
		putenv('SYMFONY_DOTENV_VARS=' . $_SERVER['SYMFONY_DOTENV_VARS']);

		try {
			$dotenv = new Dotenv();

			if (!$env && file_exists($p = "$path.local")) {
				$env = $_ENV[$envKey] = $dotenv->parse((string) file_get_contents($p), $p)[$envKey] ?? NULL;
			}

			if (!$env) {
				throw new RuntimeException(sprintf('Please provide the name of the environment either by passing it as command line argument or by defining the "%s" variable in the ".env.local" file.', $envKey));
			}

			$dotenv->loadEnv($path, $envKey, 'dev', ['test']);

			unset($_ENV['SYMFONY_DOTENV_VARS']);
			$env = $_ENV;
		} finally {
			[$_SERVER, $_ENV] = $globalsBackup;
		}

		return $env;
	}
}
