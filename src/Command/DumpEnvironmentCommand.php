<?php

declare(strict_types=1);

namespace SixtyEightPublishers\Environment\Command;

use Symfony;
use Composer;
use SixtyEightPublishers;

final class DumpEnvironmentCommand extends Composer\Command\BaseCommand
{
	/** @var string  */
	private $rootDir;

	/**
	 * @param string      $rootDir
	 * @param string|NULL $name
	 */
	public function __construct(string $rootDir, string $name = NULL)
	{
		$this->rootDir = rtrim($rootDir, '/');

		parent::__construct($name);
	}

	/**
	 * {@inheritDoc}
	 */
	protected function configure(): void
	{
		$this->setName('environment:dump')
			->setAliases(['env:dump'])
			->setDescription('Compiles variables from .env files to .env.local.php.')
			->addArgument('env', Symfony\Component\Console\Input\InputArgument::REQUIRED, 'The application environment to dump .env files for - e.g. "prod".');
	}

	/**
	 * {@inheritDoc}
	 */
	protected function execute(Symfony\Component\Console\Input\InputInterface $input, Symfony\Component\Console\Output\OutputInterface $output): int
	{
		$_SERVER[SixtyEightPublishers\Environment\Bootstrap\EnvBootstrap::APP_ENV] = $env = $input->getArgument('env');
		$filename = $this->rootDir . '/.env';
		$variables = var_export($this->loadEnv($filename, $env), TRUE);

		$content = <<<EOT
<?php

// This file was generated by 68publishers/environment
// Run command "composer env:dump $env" to regenerate it

return $variables;

EOT;
		file_put_contents($filename.'.local.php', $content, LOCK_EX);

		$this->getIO()->writeError('An file .env.local.php has been dumped.');

		return 0;
	}

	/**
	 * @param string $path
	 * @param string $env
	 *
	 * @return array
	 */
	private function loadEnv(string $path, string $env): array
	{
		// save original variables
		$backup = [$_SERVER, $_ENV];

		unset($_SERVER[SixtyEightPublishers\Environment\Bootstrap\EnvBootstrap::APP_ENV]);
		$_ENV = [SixtyEightPublishers\Environment\Bootstrap\EnvBootstrap::APP_ENV => $env];

		// Load SYMFONY_DOTENV_VARS variable that is used by symfony/dotenv
		$_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER));
		putenv('SYMFONY_DOTENV_VARS='.$_SERVER['SYMFONY_DOTENV_VARS']);

		try {
			(new Symfony\Component\Dotenv\Dotenv(FALSE))->loadEnv($path);

			unset($_ENV['SYMFONY_DOTENV_VARS']);

			$output = $_ENV;
		} finally {
			// set original variables back
			[$_SERVER, $_ENV] = $backup;
		}

		return $output ?? [];
	}
}
